{"ast":null,"code":"import { getServerResponse, catchServerResponseError } from '../functions/getServerResponse';\nimport { saveTokens, clearTokens } from '../functions/handleTokens';\nimport { GET_TOKEN_ENDPOINT, GET_USER_INFO_ENDPOINT, LOGOUT_ENDPOINT, RESET_PASSWORD_ENDPOINT, FORGOT_PASSWORD_ENDPOINT } from '../../constants/constants';\nexport const AUTH_REQUEST = 'AUTH_REQUEST';\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\nexport const AUTH_FAILED = 'AUTH_FAILED';\nexport const UPDATE_TOKEN = 'UPDATE_TOKEN';\nexport const VERIFY_USER = 'VERIFY_USER';\nexport const LOGOUT = 'LOGOUT';\nexport const AUTH_CHECKED = 'AUTH_CHECKED';\nexport function getAuth(endpoint, dataToPost) {\n  return async function (dispatch) {\n    dispatch({\n      type: AUTH_REQUEST\n    });\n    getServerResponse(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(dataToPost)\n    }).then(res => {\n      dispatch({\n        type: AUTH_SUCCESS,\n        payload: res\n      });\n      saveTokens(res);\n    }).catch(error => catchServerResponseError(error, dispatch));\n  };\n}\nexport function refreshToken() {\n  return async function (dispatch) {\n    getServerResponse(GET_TOKEN_ENDPOINT, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        token: localStorage.getItem('refreshToken')\n      })\n    }).then(res => {\n      dispatch({\n        type: UPDATE_TOKEN,\n        payload: res\n      });\n      saveTokens(res);\n    }).catch(error => catchServerResponseError(error, dispatch));\n  };\n}\nexport function verifyToken() {\n  return async function (dispatch) {\n    return getServerResponse(GET_USER_INFO_ENDPOINT, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        authorization: localStorage.getItem('accessToken')\n      }\n    }).then(res => {\n      dispatch({\n        type: AUTH_SUCCESS,\n        payload: res\n      });\n      return true;\n    }).catch(error => {\n      error.then(error => {\n        if (error.message === \"jwt expired\") {\n          dispatch(refreshToken());\n        }\n      });\n      catchServerResponseError(error, dispatch);\n      return false;\n    });\n  };\n}\nexport function getUserInfo() {\n  return async function (dispatch) {\n    dispatch({\n      type: AUTH_REQUEST\n    });\n    getServerResponse(GET_USER_INFO_ENDPOINT, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        authorization: localStorage.getItem('accessToken')\n      }\n    }).then(res => {\n      dispatch({\n        type: AUTH_SUCCESS,\n        payload: res\n      });\n    }).catch(error => catchServerResponseError(error, dispatch));\n  };\n}\nexport function changeUserInfo(dataToPost) {\n  return async function (dispatch) {\n    getServerResponse(GET_USER_INFO_ENDPOINT, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        authorization: localStorage.getItem('accessToken')\n      },\n      body: JSON.stringify(dataToPost)\n    }).then(res => {\n      dispatch({\n        type: AUTH_SUCCESS,\n        payload: res,\n        password: dataToPost.password\n      });\n    }).catch(error => catchServerResponseError(error, dispatch));\n  };\n}\nexport function logout() {\n  return async function (dispatch) {\n    getServerResponse(LOGOUT_ENDPOINT, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        token: localStorage.getItem('refreshToken')\n      })\n    }).then(res => {\n      dispatch({\n        type: LOGOUT\n      });\n      clearTokens();\n    }).catch(error => catchServerResponseError(error, dispatch));\n  };\n}\nexport function resetPassword(navigate, dataToPost) {\n  return async function (dispatch) {\n    getServerResponse(RESET_PASSWORD_ENDPOINT, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        password: dataToPost.password,\n        token: dataToPost.token\n      })\n    }).then(() => {\n      navigate(\"/profile\", {\n        replace: true\n      });\n    }).catch(error => catchServerResponseError(error, dispatch));\n  };\n}\nexport function forgotPassword(navigate, location, dataToPost) {\n  return async function (dispatch) {\n    getServerResponse(FORGOT_PASSWORD_ENDPOINT, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: dataToPost\n      })\n    }).then(() => {\n      navigate(\"/reset-password\", {\n        state: {\n          from: location.pathname\n        }\n      });\n    }).catch(error => catchServerResponseError(error, dispatch));\n  };\n}","map":{"version":3,"names":["getServerResponse","catchServerResponseError","saveTokens","clearTokens","GET_TOKEN_ENDPOINT","GET_USER_INFO_ENDPOINT","LOGOUT_ENDPOINT","RESET_PASSWORD_ENDPOINT","FORGOT_PASSWORD_ENDPOINT","AUTH_REQUEST","AUTH_SUCCESS","AUTH_FAILED","UPDATE_TOKEN","VERIFY_USER","LOGOUT","AUTH_CHECKED","getAuth","endpoint","dataToPost","dispatch","type","method","headers","body","JSON","stringify","then","res","payload","catch","error","refreshToken","token","localStorage","getItem","verifyToken","authorization","message","getUserInfo","changeUserInfo","password","logout","resetPassword","navigate","replace","forgotPassword","location","email","state","from","pathname"],"sources":["/Users/reinaka/Documents/untitled folder/_stellar_/src/services/actions/auth-actions.ts"],"sourcesContent":["import { getServerResponse, catchServerResponseError } from '../functions/getServerResponse';\nimport { saveTokens, clearTokens } from '../functions/handleTokens';\nimport { \n        GET_TOKEN_ENDPOINT, \n        GET_USER_INFO_ENDPOINT, \n        LOGOUT_ENDPOINT, \n        RESET_PASSWORD_ENDPOINT, \n        FORGOT_PASSWORD_ENDPOINT \n    } from '../../constants/constants';\nimport { AppDispatch } from '../types/thunkTypes';\nimport { NavigateFunction, Location } from 'react-router-dom';\n\nexport const AUTH_REQUEST : 'AUTH_REQUEST' = 'AUTH_REQUEST';\nexport const AUTH_SUCCESS : 'AUTH_SUCCESS' = 'AUTH_SUCCESS';\nexport const AUTH_FAILED : 'AUTH_FAILED' = 'AUTH_FAILED';\nexport const UPDATE_TOKEN : 'UPDATE_TOKEN' = 'UPDATE_TOKEN';\nexport const VERIFY_USER : 'VERIFY_USER' = 'VERIFY_USER';\nexport const LOGOUT : 'LOGOUT' = 'LOGOUT';\nexport const AUTH_CHECKED : 'AUTH_CHECKED' = 'AUTH_CHECKED';\n\nexport interface IAuthRequestAction {\n    readonly type : typeof AUTH_REQUEST\n}\n\nexport interface IAuthSuccessAction {\n    readonly type : typeof AUTH_SUCCESS,\n    readonly payload : {\n        success : boolean,\n        user : {},\n    },\n    readonly password? : string\n}\n\nexport interface IUpdateTokenAction {\n    readonly type : typeof UPDATE_TOKEN,\n    readonly payload : {\n        accessToken : string,\n        refreshToken : string\n    }\n}\n\nexport interface ILogout {\n    readonly type : typeof LOGOUT\n}\n\nexport interface IAuthFailed {\n    readonly type : typeof AUTH_FAILED,\n    payload : string\n}\n\nexport interface IAuthChecked {\n    readonly type : typeof AUTH_CHECKED\n}\n\nexport type TAuthActions = IAuthRequestAction | IAuthSuccessAction | IUpdateTokenAction | ILogout | IAuthFailed | IAuthChecked;\n\nexport function getAuth(endpoint : string, dataToPost : {}) {   \n    return async function(dispatch : AppDispatch) {\n        dispatch({\n            type: AUTH_REQUEST\n        });\n        getServerResponse(endpoint, {\n            method: 'POST',\n                    headers: {\n                    'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(dataToPost)\n        })\n        .then((res) => {\n                dispatch({\n                    type: AUTH_SUCCESS,\n                    payload: res\n                });\n                saveTokens(res);\n        })\n        .catch(error => catchServerResponseError(error, dispatch))\n    }\n}\n\nexport function refreshToken() {\n    return async function(dispatch : AppDispatch) {\n        getServerResponse(GET_TOKEN_ENDPOINT, {\n            method: 'POST',\n                    headers: {\n                    'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        token: localStorage.getItem('refreshToken')\n                    }),\n        })\n        .then(res => {\n                dispatch({\n                    type: UPDATE_TOKEN,\n                    payload: res\n                });\n                saveTokens(res);\n        })\n        .catch(error => catchServerResponseError(error, dispatch))\n    }  \n}\n\nexport function verifyToken() {\n    return async function(dispatch : AppDispatch) {\n        return getServerResponse(GET_USER_INFO_ENDPOINT, {\n            method: 'PATCH',\n            headers: {\n            'Content-Type': 'application/json',\n            authorization: localStorage.getItem('accessToken'),\n            },\n        })\n        .then(res => {\n                dispatch({\n                    type: AUTH_SUCCESS,\n                    payload: res\n                });\n            return true;\n        })\n        .catch(error => {\n            error.then((error: { message: string; }) => {\n                if(error.message === \"jwt expired\") {\n                    dispatch(refreshToken());\n                }\n            })\n            catchServerResponseError(error, dispatch);\n            return false;\n        });\n    }\n}\n\nexport function getUserInfo() {\n    return async function(dispatch : AppDispatch) {\n        dispatch({\n            type: AUTH_REQUEST\n        });\n        getServerResponse(GET_USER_INFO_ENDPOINT, {\n            method: 'GET',\n            headers: {\n            'Content-Type': 'application/json',\n            authorization: localStorage.getItem('accessToken'),\n            },\n        })\n        .then(res => {\n                dispatch({\n                    type: AUTH_SUCCESS,\n                    payload: res\n                });\n        })\n        .catch(error => catchServerResponseError(error, dispatch))\n}}\n\nexport function changeUserInfo(dataToPost : {name? : string, email? : string, password?: string}) {\n    return async function(dispatch : AppDispatch) {\n        getServerResponse(GET_USER_INFO_ENDPOINT, {\n            method: 'PATCH',\n            headers: {\n            'Content-Type': 'application/json',\n            authorization: localStorage.getItem('accessToken'),\n            },\n            body: JSON.stringify(dataToPost)\n        })\n        .then(res => {\n                dispatch({\n                    type: AUTH_SUCCESS,\n                    payload: res,\n                    password : dataToPost.password\n                });\n        })\n        .catch(error => catchServerResponseError(error, dispatch))\n    }\n}\n\nexport function logout() {\n    return async function(dispatch : AppDispatch) {\n        getServerResponse(LOGOUT_ENDPOINT, {\n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                token: localStorage.getItem('refreshToken')\n            })\n        })\n        .then(res => {\n                dispatch({\n                    type: LOGOUT\n                });\n                clearTokens();\n        })\n        .catch(error => catchServerResponseError(error, dispatch))\n    }\n}\n\nexport function resetPassword(navigate: NavigateFunction, dataToPost : {password : string, token : string}) {\n    return async function(dispatch : AppDispatch) {\n        getServerResponse(RESET_PASSWORD_ENDPOINT, {\n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                password: dataToPost.password,\n                token: dataToPost.token\n            })\n        })\n        .then(() => {\n                navigate(\"/profile\", {replace: true});\n        })\n        .catch(error => catchServerResponseError(error, dispatch))\n    }\n}\n\nexport function forgotPassword(navigate: NavigateFunction, location: Location, dataToPost : {}) {\n    return async function(dispatch : AppDispatch) {\n        getServerResponse(FORGOT_PASSWORD_ENDPOINT, {\n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                email: dataToPost\n            })\n        })\n        .then(() => {\n                navigate(\"/reset-password\", {state: { from: location.pathname}});\n        })\n        .catch(error => catchServerResponseError(error, dispatch))\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}