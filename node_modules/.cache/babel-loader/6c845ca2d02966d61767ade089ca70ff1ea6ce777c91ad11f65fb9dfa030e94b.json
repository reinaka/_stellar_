{"ast":null,"code":"import { GET_INGREDIENTS_ENDPOINT } from '../../constants/constants';\nimport { getServerResponse } from '../functions/getServerResponse';\nexport const UPLOAD_INGREDIENTS_DATA_REQUEST = 'UPLOAD_INGREDIENTS_DATA_REQUEST';\nexport const UPLOAD_INGREDIENTS_DATA_SUCCESS = 'UPLOAD_INGREDIENTS_DATA_SUCCESS';\nexport const UPLOAD_INGREDIENTS_DATA_FAILED = 'UPLOAD_INGREDIENTS_DATA_FAILED';\nexport function getData() {\n  return async function (dispatch) {\n    try {\n      dispatch({\n        type: UPLOAD_INGREDIENTS_DATA_REQUEST\n      });\n      getServerResponse(GET_INGREDIENTS_ENDPOINT).then(res => {\n        dispatch({\n          type: UPLOAD_INGREDIENTS_DATA_SUCCESS,\n          items: res.data\n        });\n      });\n    } catch (error) {\n      dispatch({\n        type: UPLOAD_INGREDIENTS_DATA_FAILED\n      });\n    }\n  };\n}","map":{"version":3,"names":["GET_INGREDIENTS_ENDPOINT","getServerResponse","UPLOAD_INGREDIENTS_DATA_REQUEST","UPLOAD_INGREDIENTS_DATA_SUCCESS","UPLOAD_INGREDIENTS_DATA_FAILED","getData","dispatch","type","then","res","items","data","error"],"sources":["/Users/reinaka/Documents/untitled folder/_stellar_/src/services/actions/all-ingredients-actions.ts"],"sourcesContent":["import { TIngredient } from '../types/types';\nimport { GET_INGREDIENTS_ENDPOINT } from '../../constants/constants';\nimport { getServerResponse } from '../functions/getServerResponse';\nimport { AppDispatch } from '../types/thunkTypes';\n\nexport const UPLOAD_INGREDIENTS_DATA_REQUEST : 'UPLOAD_INGREDIENTS_DATA_REQUEST' = 'UPLOAD_INGREDIENTS_DATA_REQUEST';\nexport const UPLOAD_INGREDIENTS_DATA_SUCCESS : 'UPLOAD_INGREDIENTS_DATA_SUCCESS' = 'UPLOAD_INGREDIENTS_DATA_SUCCESS';\nexport const UPLOAD_INGREDIENTS_DATA_FAILED : 'UPLOAD_INGREDIENTS_DATA_FAILED'= 'UPLOAD_INGREDIENTS_DATA_FAILED';\n\nexport interface IUploadIngredientsAction {\n    readonly type : typeof UPLOAD_INGREDIENTS_DATA_REQUEST,\n    readonly itemsRequest : boolean\n}\n\nexport interface IIngredientsSuccessAction {\n    readonly type : typeof UPLOAD_INGREDIENTS_DATA_SUCCESS,\n    readonly items: TIngredient[],\n    readonly itemsFailed: boolean,  \n    readonly itemsRequest: boolean,\n}\n\nexport interface IIngredientsFailed {\n    readonly type : typeof UPLOAD_INGREDIENTS_DATA_FAILED,\n    readonly itemsFailed: boolean, \n    readonly itemsRequest: boolean,\n    readonly items: []\n}\n\nexport type TIngredientsActions = IUploadIngredientsAction | IIngredientsSuccessAction | IIngredientsFailed;\n\nexport function getData() {\n    return async function(dispatch : AppDispatch) { \n        try {\n            dispatch({\n                type: UPLOAD_INGREDIENTS_DATA_REQUEST\n            });\n            getServerResponse(GET_INGREDIENTS_ENDPOINT)\n            .then(res => {\n                    dispatch({\n                        type: UPLOAD_INGREDIENTS_DATA_SUCCESS,\n                        items: res.data,\n                    })\n                }\n            )\n        }\n        catch(error) {\n            dispatch({\n                type: UPLOAD_INGREDIENTS_DATA_FAILED\n            })\n        }\n    }\n} \n"],"mappings":"AACA,SAASA,wBAAwB,QAAQ,2BAA2B;AACpE,SAASC,iBAAiB,QAAQ,gCAAgC;AAGlE,OAAO,MAAMC,+BAAmE,GAAG,iCAAiC;AACpH,OAAO,MAAMC,+BAAmE,GAAG,iCAAiC;AACpH,OAAO,MAAMC,8BAAiE,GAAE,gCAAgC;AAuBhH,OAAO,SAASC,OAAOA,CAAA,EAAG;EACtB,OAAO,gBAAeC,QAAsB,EAAE;IAC1C,IAAI;MACAA,QAAQ,CAAC;QACLC,IAAI,EAAEL;MACV,CAAC,CAAC;MACFD,iBAAiB,CAACD,wBAAwB,CAAC,CAC1CQ,IAAI,CAACC,GAAG,IAAI;QACLH,QAAQ,CAAC;UACLC,IAAI,EAAEJ,+BAA+B;UACrCO,KAAK,EAAED,GAAG,CAACE;QACf,CAAC,CAAC;MACN,CACJ,CAAC;IACL,CAAC,CACD,OAAMC,KAAK,EAAE;MACTN,QAAQ,CAAC;QACLC,IAAI,EAAEH;MACV,CAAC,CAAC;IACN;EACJ,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}