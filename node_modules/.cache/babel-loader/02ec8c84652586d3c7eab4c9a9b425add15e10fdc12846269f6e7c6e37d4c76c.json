{"ast":null,"code":"var _jsxFileName = \"/Users/reinaka/Documents/untitled folder/_stellar_/react-burger/src/components/modal/order-detailed-info/order-detailed-info.tsx\",\n  _s = $RefreshSig$();\nimport { useParams } from \"react-router-dom\";\nimport { useAppSelector } from \"../../../services/hooks/reduxTypes\";\nimport { selectCurrentOrder, selectOrders } from \"../../../services/functions/selectorFunctions\";\nimport { selectAllIngredientsItems } from \"../../../services/functions/selectorFunctions\";\nimport { Spinner } from \"../../ui-elements/spinner/spinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const OrderDetailedInfo = () => {\n  _s();\n  const params = useParams();\n  const selectedOrder = useAppSelector(selectCurrentOrder);\n  const allOrders = useAppSelector(selectOrders);\n  if (allOrders) allOrders.filter(item => item._id === params.orderId);\n  const storeIngredients = useAppSelector(selectAllIngredientsItems);\n  const orderData = selectedOrder ? selectedOrder : allOrders[0];\n  if (orderData && Object.keys(orderData).length !== 0) {\n    const date = orderData.updatedAt;\n\n    //расчет общей стоимости заказа\n    let sum = 0;\n    orderData.ingredients.forEach(item => storeIngredients.forEach(ingredient => {\n      if (ingredient._id === item) sum += ingredient.price;\n    }));\n\n    //группировка ингредиентов с подсчетом количества одинаковых элементов\n\n    const groupedIngredients = orderData.ingredients.reduce((acc, item) => {\n      acc[item] = (acc[item] || 0) + 1;\n      return acc;\n    }, {});\n    const groupedIngredientsKeys = Object.keys(groupedIngredients) || [];\n    if (!orderData || !groupedIngredients) return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 54\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this);\n  }\n};\n_s(OrderDetailedInfo, \"bWwkYB0cZWAXpO0rnYUcVwvp5ck=\", false, function () {\n  return [useParams, useAppSelector, useAppSelector, useAppSelector];\n});\n_c = OrderDetailedInfo;\nvar _c;\n$RefreshReg$(_c, \"OrderDetailedInfo\");","map":{"version":3,"names":["useParams","useAppSelector","selectCurrentOrder","selectOrders","selectAllIngredientsItems","Spinner","jsxDEV","_jsxDEV","OrderDetailedInfo","_s","params","selectedOrder","allOrders","filter","item","_id","orderId","storeIngredients","orderData","Object","keys","length","date","updatedAt","sum","ingredients","forEach","ingredient","price","groupedIngredients","reduce","acc","groupedIngredientsKeys","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/reinaka/Documents/untitled folder/_stellar_/react-burger/src/components/modal/order-detailed-info/order-detailed-info.tsx"],"sourcesContent":["import { useParams } from \"react-router-dom\";\nimport { useAppSelector } from \"../../../services/hooks/reduxTypes\";\nimport { selectCurrentOrder, selectOrders } from \"../../../services/functions/selectorFunctions\";\nimport { OrderStatus } from \"../../ui-elements/order-status/order-status\";\nimport { FormattedDate } from \"@ya.praktikum/react-developer-burger-ui-components\";\nimport { Price } from \"../../ui-elements/price/price\";\nimport { TIngredient } from \"../../../services/types/types\";\nimport { selectAllIngredientsItems } from \"../../../services/functions/selectorFunctions\";\nimport { OrderIngredientsBlock } from \"../../ui-elements/order-ingredients-block/order-ingredients-block.module.css/order-ingredients-block\";\nimport styles from './order-detailed-info.module.css';\nimport { Spinner } from \"../../ui-elements/spinner/spinner\";\n\nexport const OrderDetailedInfo = () => {\n    const params = useParams();\n    const selectedOrder = useAppSelector(selectCurrentOrder);\n    const allOrders = useAppSelector(selectOrders);\n    if(allOrders) allOrders.filter(item => item._id === params.orderId);\n    const storeIngredients : TIngredient[] = useAppSelector(selectAllIngredientsItems);\n    const orderData = selectedOrder \n                        ? selectedOrder \n                        : allOrders[0]\n\n    if(orderData && Object.keys(orderData).length !== 0) {\n        const date = orderData.updatedAt;\n    \n        //расчет общей стоимости заказа\n        let sum = 0;\n        orderData.ingredients.forEach((item : string) => storeIngredients.forEach(ingredient => {\n            if(ingredient._id === item) sum += ingredient.price;\n        }));\n\n        //группировка ингредиентов с подсчетом количества одинаковых элементов\n        type TGroupedIngredients = {\n            [key: string]: number\n        }\n        const groupedIngredients = orderData.ingredients.reduce((acc : TGroupedIngredients, item : string) => {\n            acc[item] = (acc[item] || 0) + 1;\n            return acc;\n        }, {});\n        const groupedIngredientsKeys : string[] | [] = Object.keys(groupedIngredients) || [];\n\n        if(!orderData || !groupedIngredients) return <Spinner />;\n        return (\n            <div>\n                {/* <p className={`text text_type_digits-default ${styles.num} mb-10`}>#{orderData.number}</p>\n                <h2 className=\"text text_type_main-medium mb-3\">{orderData.name}</h2>\n                <OrderStatus status={`${orderData.status}`}/>\n                <p className=\"text text_type_main-medium mb-6 mt-15\">Состав:</p>\n                <ul className={`${styles.list} mb-16`}>\n                    {groupedIngredientsKeys.map(ingredient => (\n                        <li key={ingredient}>\n                            <OrderIngredientsBlock itemID={ingredient} quantity={groupedIngredients[ingredient]}/>\n                        </li>\n                    ))\n                    }\n                </ul>\n                <div className={`${styles.dateAndTotalPrice}`}>\n                    <FormattedDate className=\"text text_type_main-small text_color_inactive\" date={new Date(date)} />\n                    <Price price={sum}/>\n                </div> */}\n            </div>\n        )\n    }\n};"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,cAAc,QAAQ,oCAAoC;AACnE,SAASC,kBAAkB,EAAEC,YAAY,QAAQ,+CAA+C;AAKhG,SAASC,yBAAyB,QAAQ,+CAA+C;AAGzF,SAASC,OAAO,QAAQ,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAMC,MAAM,GAAGV,SAAS,CAAC,CAAC;EAC1B,MAAMW,aAAa,GAAGV,cAAc,CAACC,kBAAkB,CAAC;EACxD,MAAMU,SAAS,GAAGX,cAAc,CAACE,YAAY,CAAC;EAC9C,IAAGS,SAAS,EAAEA,SAAS,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAKL,MAAM,CAACM,OAAO,CAAC;EACnE,MAAMC,gBAAgC,GAAGhB,cAAc,CAACG,yBAAyB,CAAC;EAClF,MAAMc,SAAS,GAAGP,aAAa,GACTA,aAAa,GACbC,SAAS,CAAC,CAAC,CAAC;EAElC,IAAGM,SAAS,IAAIC,MAAM,CAACC,IAAI,CAACF,SAAS,CAAC,CAACG,MAAM,KAAK,CAAC,EAAE;IACjD,MAAMC,IAAI,GAAGJ,SAAS,CAACK,SAAS;;IAEhC;IACA,IAAIC,GAAG,GAAG,CAAC;IACXN,SAAS,CAACO,WAAW,CAACC,OAAO,CAAEZ,IAAa,IAAKG,gBAAgB,CAACS,OAAO,CAACC,UAAU,IAAI;MACpF,IAAGA,UAAU,CAACZ,GAAG,KAAKD,IAAI,EAAEU,GAAG,IAAIG,UAAU,CAACC,KAAK;IACvD,CAAC,CAAC,CAAC;;IAEH;;IAIA,MAAMC,kBAAkB,GAAGX,SAAS,CAACO,WAAW,CAACK,MAAM,CAAC,CAACC,GAAyB,EAAEjB,IAAa,KAAK;MAClGiB,GAAG,CAACjB,IAAI,CAAC,GAAG,CAACiB,GAAG,CAACjB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;MAChC,OAAOiB,GAAG;IACd,CAAC,EAAE,CAAC,CAAC,CAAC;IACN,MAAMC,sBAAsC,GAAGb,MAAM,CAACC,IAAI,CAACS,kBAAkB,CAAC,IAAI,EAAE;IAEpF,IAAG,CAACX,SAAS,IAAI,CAACW,kBAAkB,EAAE,oBAAOtB,OAAA,CAACF,OAAO;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IACxD,oBACI7B,OAAA;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAiBK,CAAC;EAEd;AACJ,CAAC;AAAC3B,EAAA,CAnDWD,iBAAiB;EAAA,QACXR,SAAS,EACFC,cAAc,EAClBA,cAAc,EAESA,cAAc;AAAA;AAAAoC,EAAA,GAL9C7B,iBAAiB;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}