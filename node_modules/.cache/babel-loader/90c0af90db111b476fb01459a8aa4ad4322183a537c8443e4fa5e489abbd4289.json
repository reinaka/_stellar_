{"ast":null,"code":"import { WS_CONNECTION_START, WS_CONNECTION_SUCCESS, WS_CONNECTION_ERROR, WS_GET_MESSAGE, WS_SEND_MESSAGE, WS_CONNECTION_CLOSED } from '../actions/socket-actions';\nimport { WS_BASE_URL } from '../../constants/constants';\nexport const socketMiddleware = wsActions => {\n  return store => {\n    let socket = null;\n    return next => action => {\n      const {\n        dispatch\n      } = store;\n      const {\n        type,\n        payload\n      } = action;\n      if (type === WS_CONNECTION_START) {\n        socket = new WebSocket(`${WS_BASE_URL}${payload}`);\n      }\n      ;\n      if (socket) {\n        socket.onopen = event => {\n          dispatch({\n            type: WS_CONNECTION_SUCCESS,\n            payload: event\n          });\n        };\n        socket.onerror = event => {\n          dispatch({\n            type: WS_CONNECTION_ERROR,\n            payload: event\n          });\n        };\n        socket.onmessage = event => {\n          const {\n            data\n          } = event;\n          dispatch({\n            type: WS_GET_MESSAGE,\n            payload: data\n          });\n        };\n        socket.onclose = event => {\n          dispatch({\n            type: WS_CONNECTION_CLOSED,\n            payload: event\n          });\n        };\n        if (type === WS_SEND_MESSAGE) {\n          const message = action.payload;\n          socket.send(JSON.stringify(message));\n        }\n      }\n      next(action);\n    };\n  };\n};","map":{"version":3,"names":["WS_CONNECTION_START","WS_CONNECTION_SUCCESS","WS_CONNECTION_ERROR","WS_GET_MESSAGE","WS_SEND_MESSAGE","WS_CONNECTION_CLOSED","WS_BASE_URL","socketMiddleware","wsActions","store","socket","next","action","dispatch","type","payload","WebSocket","onopen","event","onerror","onmessage","data","onclose","message","send","JSON","stringify"],"sources":["/Users/reinaka/Documents/untitled folder/_stellar_/react-burger/src/services/middleware/socketMiddleware.ts"],"sourcesContent":["import type { Middleware, MiddlewareAPI } from 'redux';\nimport { AppDispatch } from '../types/thunkTypes';\nimport { RootState } from '../types/thunkTypes';\nimport {\n    WS_CONNECTION_START,\n    WS_CONNECTION_SUCCESS,\n    WS_CONNECTION_ERROR,\n    WS_GET_MESSAGE,\n    WS_SEND_MESSAGE,\n    WS_CONNECTION_CLOSED\n} from '../actions/socket-actions';\nimport { WS_BASE_URL } from '../../constants/constants';\nimport { TSocketActions, TWSA } from '../actions/socket-actions';\n\nexport const socketMiddleware = (wsActions: TSocketActions): Middleware => {\n    return ((store: MiddlewareAPI<AppDispatch, RootState>) => {\n        let socket: WebSocket | null = null;\n\n    return next => (action: TSocketActions) => {\n        const { dispatch } = store;\n        const { type, payload } = action;\n        \n        if (type === WS_CONNECTION_START) {\n            socket = new WebSocket(`${WS_BASE_URL}${payload}`);\n        };\n\n        if (socket) {\n        socket.onopen = event => {\n            dispatch({ type: WS_CONNECTION_SUCCESS, payload: event });\n        };\n\n        socket.onerror = event => {\n            dispatch({ type: WS_CONNECTION_ERROR, payload: event });\n        };\n\n        socket.onmessage = event => {\n            const { data } = event;\n            dispatch({ type: WS_GET_MESSAGE, payload: data });\n        };\n        \n        socket.onclose = event => {\n            dispatch({ type: WS_CONNECTION_CLOSED, payload: event });\n        };\n\n        if (type === WS_SEND_MESSAGE) {\n            const message  = action.payload;\n            socket.send(JSON.stringify(message));\n        }\n    }\n\n    next(action);\n    };\n    }) as Middleware;\n}; "],"mappings":"AAGA,SACIA,mBAAmB,EACnBC,qBAAqB,EACrBC,mBAAmB,EACnBC,cAAc,EACdC,eAAe,EACfC,oBAAoB,QACjB,2BAA2B;AAClC,SAASC,WAAW,QAAQ,2BAA2B;AAGvD,OAAO,MAAMC,gBAAgB,GAAIC,SAAyB,IAAiB;EACvE,OAASC,KAA4C,IAAK;IACtD,IAAIC,MAAwB,GAAG,IAAI;IAEvC,OAAOC,IAAI,IAAKC,MAAsB,IAAK;MACvC,MAAM;QAAEC;MAAS,CAAC,GAAGJ,KAAK;MAC1B,MAAM;QAAEK,IAAI;QAAEC;MAAQ,CAAC,GAAGH,MAAM;MAEhC,IAAIE,IAAI,KAAKd,mBAAmB,EAAE;QAC9BU,MAAM,GAAG,IAAIM,SAAS,CAAE,GAAEV,WAAY,GAAES,OAAQ,EAAC,CAAC;MACtD;MAAC;MAED,IAAIL,MAAM,EAAE;QACZA,MAAM,CAACO,MAAM,GAAGC,KAAK,IAAI;UACrBL,QAAQ,CAAC;YAAEC,IAAI,EAAEb,qBAAqB;YAAEc,OAAO,EAAEG;UAAM,CAAC,CAAC;QAC7D,CAAC;QAEDR,MAAM,CAACS,OAAO,GAAGD,KAAK,IAAI;UACtBL,QAAQ,CAAC;YAAEC,IAAI,EAAEZ,mBAAmB;YAAEa,OAAO,EAAEG;UAAM,CAAC,CAAC;QAC3D,CAAC;QAEDR,MAAM,CAACU,SAAS,GAAGF,KAAK,IAAI;UACxB,MAAM;YAAEG;UAAK,CAAC,GAAGH,KAAK;UACtBL,QAAQ,CAAC;YAAEC,IAAI,EAAEX,cAAc;YAAEY,OAAO,EAAEM;UAAK,CAAC,CAAC;QACrD,CAAC;QAEDX,MAAM,CAACY,OAAO,GAAGJ,KAAK,IAAI;UACtBL,QAAQ,CAAC;YAAEC,IAAI,EAAET,oBAAoB;YAAEU,OAAO,EAAEG;UAAM,CAAC,CAAC;QAC5D,CAAC;QAED,IAAIJ,IAAI,KAAKV,eAAe,EAAE;UAC1B,MAAMmB,OAAO,GAAIX,MAAM,CAACG,OAAO;UAC/BL,MAAM,CAACc,IAAI,CAACC,IAAI,CAACC,SAAS,CAACH,OAAO,CAAC,CAAC;QACxC;MACJ;MAEAZ,IAAI,CAACC,MAAM,CAAC;IACZ,CAAC;EACD,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}